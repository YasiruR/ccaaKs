stages:
  - validate
  - build
  - test
  - pre-deploy
  - evaluate
  - cleanup
  - deploy

variables:
  CC_NAME: asset
  CC_VERSION: 0.28
  CC_ID_STAGING: asset_0_28:<hash>
  CC_ID_PROD: asset_0_28:<hash>
  CC_PORT: 6051
  REMOTE_FILE_PATH: "/home/${REMOTE_USER}/manifests"
  LXC_NODE: <node-name>
  LXC_FILE_PATH: /root/manifests
  HFB_ORG_MSP: org-msp
  HFB_CHAN_NAME: <chan-name>
  HFB_USR: peer1
  HFB_PEER_HOST: 172.17.0.1
  HFB_PEER_PORT: 30106

  # project details
  PROJECT_ID: 1328
  REPOSITORY_ID: 124
  GITLAB_URL: <gitlab-url

#workflow: #or .standard-rules
#  rules:
#    - if: $CI_COMMIT_BRANCH == "release"

include:
  - template: Jobs/Container-Scanning.gitlab-ci.yml
  - template: Jobs/Dependency-Scanning.gitlab-ci.yml

go-lint:
  stage: validate
  tags:
    - ccaas-runner
  image: golangci/golangci-lint:v1.57.2
  script:
    - golangci-lint run -v --timeout 10m
  needs: []

go-test:
  stage: validate
  tags:
    - ccaas-runner
  image: golang:1.19
  script:
    - cd asset
    - go test -v -coverprofile=cov.out .
  needs: []

sonarqube-check:
  stage: validate
  tags:
    - ccaas-runner
  image:
    name: sonarsource/sonar-scanner-cli:5.0
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner
  allow_failure: true
  only:
    - pipeline
    - main
  needs:
    - go-test

build-image:
  stage: build
  tags:
    - ccaas-runner
  image: docker:26
  variables:
    DOCKER_HOST: tcp://docker:2375    # using docker is only possible if an alias is used (may need to use the corresponding IP if otherwise)
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  services:
    - name: docker:24.0.5-dind
      alias: docker
      command: ["--tls=false"]
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
  script:
    - docker build -t "$CI_REGISTRY/$CI_PROJECT_PATH:$CC_VERSION" .
    - docker push "$CI_REGISTRY/$CI_PROJECT_PATH:$CC_VERSION"
  after_script:
    - docker logout "$CI_REGISTRY"
  needs:
    - go-lint
    - sonarqube-check

container_scanning:
  tags:
    - ccaas-runner
  variables:
    #CS_DEFAULT_BRANCH_IMAGE: $CI_REGISTRY/$CI_PROJECT_PATH:$CC_VERSION
    CS_IMAGE: $CI_REGISTRY/$CI_PROJECT_PATH:$CC_VERSION
    #CS_DISABLE_LANGUAGE_VULNERABILITY_SCAN: "false"
  needs:
    - build-image

gemnasium-dependency_scanning:
  tags:
    - ccaas-runner
  rules:
    - if: $CI_COMMIT_BRANCH == "pipeline" && $CI_COMMIT_BRANCH == "pipeline"
  needs:
    - build-image

cleanup-test:
  stage: cleanup
  image: alpine:3.15.11
  variables:
    REGCTL_VERSION: v0.6.1
  tags:
    - ccaas-runner
  needs:
    - container_scanning
    - gemnasium-dependency_scanning
  when: on_failure
  before_script:
    - apk update
    - apk add curl
  script:
    - >-
      curl
      --request DELETE
      --header "PRIVATE-TOKEN: $GITLAB_ADMIN_TOKEN"
      "$GITLAB_URL/api/v4/projects/$PROJECT_ID/registry/repositories/$REPOSITORY_ID/tags/$CC_VERSION"

deploy-staging:
  stage: pre-deploy
  tags:
    - ccaas-runner
  environment:
    name: staging
  before_script:
    - K8S_VERSION=$(tr '.' '-' <<< $CC_VERSION)
    - bash scripts/create-manifest.sh "$CC_ID_STAGING" "$CC_NAME" "$CC_VERSION" "$K8S_VERSION" "$CC_PORT" "$CI_REGISTRY/$CI_PROJECT_PATH"
    - apt-get update && apt-get install -y openssh-client
    - chmod 600 $VAR_PATH/KEY_FILE
    - ssh -i "$KEY_FILE" -o StrictHostKeyChecking=no "$REMOTE_USER@$STAGING_IP" "mkdir -p $REMOTE_FILE_PATH"
  script:
    - scp -i "$KEY_FILE" -o StrictHostKeyChecking=no "./k8s/cc-$CC_NAME-$K8S_VERSION.yaml" "$REMOTE_USER@$STAGING_IP:$REMOTE_FILE_PATH"
    - >
      ssh -i "$KEY_FILE" -o StrictHostKeyChecking=no "$REMOTE_USER@$STAGING_IP" "lxc exec $LXC_NODE -- kubectl delete secret gitlabcred --ignore-not-found;
      lxc exec $LXC_NODE -- kubectl create secret docker-registry gitlabcred --docker-server=$CI_REGISTRY --docker-username=$CR_DEPLOY_USER --docker-email=$GITLAB_EMAIL --docker-password=$CR_DEPLOY_TOKEN;
      lxc exec $LXC_NODE -- mkdir -p $LXC_FILE_PATH;
      lxc file push $REMOTE_FILE_PATH/cc-$CC_NAME-$K8S_VERSION.yaml $LXC_NODE/$LXC_FILE_PATH/;
      lxc exec $LXC_NODE -- kubectl apply -f $LXC_FILE_PATH/cc-$CC_NAME-$K8S_VERSION.yaml"
  artifacts:
    name: cc-manifests
    paths:
      - k8s
  needs:
    - container_scanning
    - gemnasium-dependency_scanning

cleanup-deploy:
  stage: cleanup
  image: alpine:3.15.11
  variables:
    REGCTL_VERSION: v0.6.1
  tags:
    - ccaas-runner
  needs:
    - deploy-staging
  when: on_failure
  before_script:
    - apk update
    - apk add curl
  script:
    - >-
      curl
      --request DELETE
      --header "PRIVATE-TOKEN: $GITLAB_ADMIN_TOKEN"
      "$GITLAB_URL/api/v4/projects/$PROJECT_ID/registry/repositories/$REPOSITORY_ID/tags/$CC_VERSION"

run-benchmarks:
  stage: evaluate
  tags:
    - ccaas-runner
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  image: docker:26
  services:
    - name: docker:24.0.5-dind
      alias: docker
      #command: ["--tls=false"]
  before_script:
    - mkdir -p caliper/peer
    - chmod 777 -R caliper
    - cp $VAR_PATH/HFB_USR_PVT_KEY $VAR_PATH/HFB_USR_PUB_CERT $VAR_PATH/HFB_TLS_ROOT_CERT caliper/peer/
    - apk add --no-cache --upgrade bash
    - bash scripts/run-caliper.sh $HFB_CHAN_NAME $HFB_ORG_MSP HFB_USR_PVT_KEY HFB_USR_PUB_CERT HFB_TLS_ROOT_CERT $HFB_USR $HFB_PEER_HOST $HFB_PEER_PORT
  script:
    - docker run -v "$PWD"/caliper:/hyperledger/caliper/workspace -e NODE_TLS_REJECT_UNAUTHORIZED=0 --name caliper hyperledger/caliper:0.6.0 launch manager --caliper-bind-sut fabric:fabric-gateway --caliper-networkconfig network.yaml --caliper-benchconfig benchmarks/asset.yaml --caliper-flow-only-test
    - docker wait caliper
  artifacts:
    name: caliper-report
    paths:
      - caliper/report.html
  after_script:
    - rm -r caliper/peer
  needs:
    - deploy-staging

cleanup-benchmarks:
  stage: cleanup
  image: alpine:3.15.11
  variables:
    REGCTL_VERSION: v0.6.1
  tags:
    - ccaas-runner
  needs:
    - run-benchmarks
  when: on_failure
  before_script:
    - apk update
    - apk add curl
  script:
    - >-
      curl
      --request DELETE
      --header "PRIVATE-TOKEN: $GITLAB_ADMIN_TOKEN"
      "$GITLAB_URL/api/v4/projects/$PROJECT_ID/registry/repositories/$REPOSITORY_ID/tags/$CC_VERSION"

verify-performance:
  stage: evaluate
  tags:
    - ccaas-runner
  image: alpine:3.15.11   # chosen against python image due to absence of security vulnerabilities (as per Docker scout)
  needs:
    - run-benchmarks
  before_script:
    - apk update
    - apk add py3-pip
    - apk add jq
    - pip3 --version
    - pip3 install yq
    - apk add bash
  script:
    - >
      if bash scripts/check-threshold.sh; then
        exit 0
      else
        exit 1
      fi

cleanup-evaluate:
  stage: cleanup
  image: alpine:3.15.11
  variables:
    REGCTL_VERSION: v0.6.1
  tags:
    - ccaas-runner
  needs:
    - verify-performance
  when: on_failure
  before_script:
    - apk update
    - apk add curl
  script:
    - >-
      curl
      --request DELETE
      --header "PRIVATE-TOKEN: $GITLAB_ADMIN_TOKEN"
      "$GITLAB_URL/api/v4/projects/$PROJECT_ID/registry/repositories/$REPOSITORY_ID/tags/$CC_VERSION"

deploy-prod:
  stage: deploy
  tags:
    - ccaas-runner
  environment:
    name: prod
    action: start
  when: manual
  needs:
    - deploy-staging
    - verify-performance
  dependencies:
    - deploy-staging
  before_script:
    - K8S_VERSION=$(tr '.' '-' <<< $CC_VERSION)
    - sed -i "s+$CC_ID_STAGING+$CC_ID_PROD+g" k8s/cc-$CC_NAME-$K8S_VERSION.yaml
    - apt-get update && apt-get install -y openssh-client
    - chmod 600 $VAR_PATH/KEY_FILE
    - ssh -i "$KEY_FILE" -o StrictHostKeyChecking=no "$REMOTE_USER@$PROD_IP" "mkdir -p $REMOTE_FILE_PATH"  # fix dir issue
  script:
    - scp -i "$KEY_FILE" -o StrictHostKeyChecking=no "./k8s/cc-$CC_NAME-$K8S_VERSION.yaml" "$REMOTE_USER@$PROD_IP:$REMOTE_FILE_PATH"
    - >
      ssh -i "$KEY_FILE" -o StrictHostKeyChecking=no "$REMOTE_USER@$PROD_IP" "kubectl delete secret gitlabcred --ignore-not-found;
      kubectl create secret docker-registry gitlabcred --docker-server=$CI_REGISTRY --docker-username=$CR_DEPLOY_USER --docker-email=$GITLAB_EMAIL --docker-password=$CR_DEPLOY_TOKEN;
      kubectl apply -f $REMOTE_FILE_PATH/cc-$CC_NAME-$K8S_VERSION.yaml"
